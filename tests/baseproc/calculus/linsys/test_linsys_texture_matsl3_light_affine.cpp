//==============================================================================
//
//    OPENROX   : File test_linsys_matsl3_texture_light_affine.cpp
//
//    Contents  : Tests for linsys_matsl3_texture_light_affine.c
//
//    Author(s) : R&D department directed by Ezio MALIS
//
//    Copyright : 2022 Robocortex S.A.S.
//
//    License   : LGPL v3 or commercial license
//
//==============================================================================

//=== INCLUDED HEADERS   =====================================================

#include <openrox_tests.hpp>

extern "C"
{
	 #include <baseproc/calculus/linsys/linsys_texture_matsl3_light_affine.h>
   #include <baseproc/array/conversion/array2d_float_from_uchar.h>
   #include <baseproc/array/fill/fillzero.h>
   #include <baseproc/image/gradient/basegradient.h>
   #include <baseproc/array/error/l2_error.h>
   #include <baseproc/array/mean/mean.h>
   #include <baseproc/array/substract/substract.h>
   #include <baseproc/image/image.h>
   #include <baseproc/image/imask/imask.h>
   #include <inout/numeric/array2d_save.h>
   #include <inout/system/print.h>
}

//=== INTERNAL MACROS    =====================================================

ROX_TEST_SUITE_BEGIN ( linsys_matsl3_texture_light_affine )

#ifdef ANDROID
   #define RESULT_PATH "/storage/emulated/0/Documents/Robocortex/Tests/Results/"
#else
   #define RESULT_PATH "./"
#endif

#define IMG_REF_PATH ROX_DATA_HOME"/regression_tests/openrox/plane/image_plane3D000.pgm"
#define IMG_CUR_PATH ROX_DATA_HOME"/regression_tests/openrox/plane/image_plane3D001.pgm"

//=== INTERNAL TYPESDEFS =====================================================

//=== INTERNAL DATATYPES =====================================================

//=== INTERNAL VARIABLES =====================================================

//=== INTERNAL FUNCTDEFS =====================================================

//=== INTERNAL FUNCTIONS =====================================================

//=== EXPORTED FUNCTIONS =====================================================


ROX_TEST_CASE_DECLARE ( rox::OpenROXTest, test_interaction_matsl3_texture )
{
	Rox_ErrorCode error = ROX_ERROR_NONE;

   Rox_Double l2_error = 0.0;

#if defined(ROX_USE_SSE) || defined(ROX_USE_AVX) 
   Rox_Double Lte_grt_data[10*1] = {         48.016852920597834,      192.368614066534064,       -3117.271431919512906,       56390.005705467207008,      -63944.012537471535325,      -55859.946814966955571,       3252995.940156243275851,      -1403292.475488746073097,      806.707305244213899,     2751.345254555344582 };
   Rox_Double LtL_grt_data[10*10] = {       200.523388491451357,      -14.112896283502609,       56931.980664583476027,       -2992.991589891935746,       71902.143507687782403,      -60045.217362722614780,     -26811966.169163119047880,     -19126451.173192154616117,       -2.834121567592116,       -4.149999365210533, 
                                            -14.112896283502609,       98.884834925535287,       -3952.308714988656448,       25900.938132870542177,      -28674.105150793846406,      -48369.235531911857834,      -6072512.055249223485589,      -8284669.218432518653572,       14.760494021934209,       52.976474165916443, 
                                          56931.980664583476027,    -3952.308714988656448,    18836774.732423841953278,     -829156.017496421467513,    21514931.962845288217068,   -17932210.778365232050419,   -8072494201.779275894165039,   -6460113863.895132064819336,     -222.173602005201502,     1659.205137688666582, 
                                          -2992.991589891935746,    25900.938132870542177,     -829156.017496421467513,     8004769.846889731474221,    -7372105.604233461432159,   -12794820.884990680962801,   -1878792436.773982048034668,   -2169220317.451426506042480,     4177.261184352689270,    14607.888243231922388, 
                                          71902.143507687782403,   -28674.105150793846406,    21514931.962845288217068,    -7372105.604233461432159,    38413259.457580953836441,    -8584315.697305401787162,   -9505342907.893632888793945,   -4779590004.937329292297363,    -9430.188558204918081,   -34674.042217854410410, 
                                         -60045.217362722614780,   -48369.235531911857834,   -17932210.778365232050419,   -12794820.884990680962801,    -8584315.697305401787162,    60779799.060389995574951,   16013003860.247953414916992,   14658302595.463346481323242,    68608.184806357661728,   154648.645059168338776, 
                                      -26811966.169163119047880, -6072512.055249223485589, -8072494201.779275894165039, -1878792436.773982048034668, -9505342907.893632888793945, 16013003860.247953414916992, 5862018298790.475585937500000, 4367243287003.839843750000000, 18739279.715231843292713, 45823756.309159711003304, 
                                      -19126451.173192154616117, -8284669.218432518653572, -6460113863.895132064819336, -2169220317.451426506042480, -4779590004.937329292297363, 14658302595.463346481323242, 4367243287003.839843750000000, 4103190381381.164062500000000, 17884690.297297786921263, 41283123.929086215794086, 
                                             -2.834121567592116,       14.760494021934209,        -222.173602005201502,        4177.261184352689270,       -9430.188558204918081,       68608.184806357661728,      18739279.715231843292713,      17884690.297297786921263,    68717.945202998365858,   125748.742078058421612, 
                                             -4.149999365210533,       52.976474165916443,        1659.205137688666582,       14607.888243231922388,      -34674.042217854410410,      154648.645059168338776,      45823756.309159711003304,      41283123.929086215794086,   125748.742078058421612,   260100.000000000000000 };
#elif ROX_USE_NEON
   Rox_Double Lte_grt_data[10*1 ] = {        48.016717910766601,      192.366176605224609,       -3117.273803710937500,       56390.101562500000000,      -63943.826171875000000,      -55859.771484375000000,          3252984.000000000000000,      -1403288.742187500000000,      806.700271606445312,     2751.264526367187500 };
   Rox_Double LtL_grt_data[10*10] = {       200.502262115478516,      -14.112922430038452,       56929.726562500000000,       -2992.997192382812500,       71901.945312500000000,      -60045.040039062500000,     -26811923.000000000000000,     -19126461.500000000000000,       -2.834118261933327,       -4.150629878044128,
                                            -14.112922430038452,       98.900104522705078,       -3952.305725097656250,       25900.628417968750000,      -28674.065429687500000,      -48369.224609375000000,      -6072487.500000000000000,      -8284666.375000000000000,       14.760374546051025,       52.977022171020508, 
                                          56929.726562500000000,    -3952.305725097656250,    18836703.000000000000000,     -829158.062500000000000,    21514936.500000000000000,   -17932177.000000000000000,   -8072486784.000000000000000,   -6460105216.000000000000000,     -222.171264648437500,     1659.148925781250000, 
                                          -2992.997192382812500,    25900.628417968750000,     -829158.062500000000000,     8004559.500000000000000,    -7372058.125000000000000,   -12794720.000000000000000,   -1878770528.000000000000000,   -2169216832.000000000000000,     4177.231323242187500,    14607.948486328125000,
                                          71901.945312500000000,   -28674.065429687500000,    21514936.500000000000000,    -7372058.125000000000000,    38412545.000000000000000,    -8584219.125000000000000,   -9505535744.000000000000000,   -4779547904.000000000000000,    -9430.285995483398437,   -34673.994422912597656,
                                         -60045.040039062500000,   -48369.224609375000000,   -17932177.000000000000000,   -12794720.000000000000000,    -8584219.125000000000000,    60779427.000000000000000,   16012756224.000000000000000,   14658279680.000000000000000,    68608.250000000000000,   154648.765625000000000, 
                                      -26811923.000000000000000, -6072487.500000000000000, -8072486784.000000000000000, -1878770528.000000000000000, -9505535744.000000000000000, 16012756224.000000000000000, 5861726748672.000000000000000, 4367160049664.000000000000000, 18739351.000000000000000, 45823712.000000000000000,
                                      -19126461.500000000000000, -8284666.375000000000000, -6460105216.000000000000000, -2169216832.000000000000000, -4779547904.000000000000000, 14658279680.000000000000000, 4367160049664.000000000000000, 4103177568256.000000000000000, 17884695.000000000000000, 41283128.500000000000000,
                                             -2.834118261933327,       14.760374546051025,        -222.171264648437500,        4177.231323242187500,       -9430.285995483398437,       68608.250000000000000,      18739351.000000000000000,      17884695.000000000000000,    68721.394531250000000,   125746.474609375000000,
                                             -4.150629878044128,       52.977022171020508,        1659.148925781250000,       14607.948486328125000,      -34673.994422912597656,      154648.765625000000000,      45823712.000000000000000,      41283128.500000000000000,   125746.474609375000000,   262144.000000000000000 }; 
#else
   // Rox_Double Lte_grt_data[10*1] = {         53.601224391473252,      192.301912796159456,       -2687.630553028810937,       56400.989948985094088,      -65317.303718923954875,      -54435.748654354058090,       3958894.607034126296639,      -1048350.700215333839878,      968.660701460288010,     3462.360977679491043 };
   // Rox_Double LtL_grt_data[10*10] = {       203.504121265609569,      -14.106502585744620,       57675.126632337385672,       -2988.467539386692351,       72711.235755296118441,      -60850.841162451288255,     -27224342.980901230126619,     -19329808.018678575754166,       -0.041935832154256,       -0.224510028958321,                                                                        
   //                                          -14.106502585744620,       98.923780528958289,       -3953.464864281836981,       25913.901248716450937,      -28678.679394419817982,      -48391.956170679564821,      -6077695.410168549045920,      -8287056.221944343298674,       14.727143386746922,       52.777454558759928,                                                                          
   //                                        57675.126632337385672,    -3953.464864281836981,    19084068.219071336090565,     -829634.551997289876454,    21720001.896363910287619,   -18134711.079835470765829,   -8176349353.008803367614746,   -6525237541.979430198669434,       -7.353162559906966,      -56.602065347135067,                                                    
   //                                        -2988.467539386692351,    25913.901248716450937,     -829634.551997289876454,     8011393.999087016098201,    -7372665.379536417312920,   -12802875.805021153762937,   -1881441131.137757539749146,   -2169844233.475337505340576,     4182.753306111647362,    14637.446092221885920,                                                 
   //                                        72711.235755296118441,   -28678.679394419817982,    21720001.896363910287619,    -7372665.379536417312920,    38829937.410834051668644,    -8990961.433018079027534,   -9715443542.667875289916992,   -4882878437.875670433044434,   -10116.834148930885931,   -37565.723071664571762,                                            
   //                                       -60850.841162451288255,   -48391.956170679564821,   -18134711.079835470765829,   -12802875.805021153762937,    -8990961.433018079027534,    61202202.420676134526730,   16224976243.093965530395508,   14763291183.275241851806641,    69320.283886663892190,   157717.608266461640596,                                          
   //                                    -27224342.980901230126619, -6077695.410168549045920, -8176349353.008803367614746, -1881441131.137757539749146, -9715443542.667875289916992, 16224976243.093965530395508, 5970017365336.553710937500000, 4420373959809.903320312500000, 19092229.048670869320631, 47318939.537204325199127,                 
   //                                    -19329808.018678575754166, -8287056.221944343298674, -6525237541.979430198669434, -2169844233.475337505340576, -4882878437.875670433044434, 14763291183.275241851806641, 4420373959809.903320312500000, 4136574722510.300292968750000, 18062161.184934515506029, 42063839.087628811597824,                 
   //                                           -0.041935832154256,       14.727143386746922,          -7.353162559906966,        4182.753306111647362,      -10116.834148930885931,       69320.283886663892190,      19092229.048670869320631,      18062161.184934515506029,    68831.329555779317161,   126197.218572229146957,                                                                         
   //                                           -0.224510028958321,       52.777454558759928,         -56.602065347135067,       14637.446092221885920,      -37565.723071664571762,      157717.608266461640596,      47318939.537204325199127,      42063839.087628811597824,   126197.218572229146957,   262144.000000000000000 };
    

   Rox_Double Lte_grt_data[10*1] = {48.016852920597834, 192.368614066534064, -3117.271431919512906, 56390.005705467207008, -63944.012537471535325, -55859.946814966955571, 3252995.940156243275851, -1403292.475488746073097, 806.707305244213899, 2751.345254555344582 };

   Rox_Double LtL_grt_data[10*10] = { 200.523388491451357, -14.112896283502609, 56931.980664583476027, -2992.991589891935746, 71902.143507687782403, -60045.217362722614780, -26811966.169163119047880, -19126451.173192154616117, -2.834121567592116, -4.149999365210533, 
                                      -14.112896283502609, 98.884834925535287, -3952.308714988656448, 25900.938132870542177, -28674.105150793846406, -48369.235531911857834, -6072512.055249223485589, -8284669.218432518653572, 14.760494021934209, 52.976474165916443, 
                                      56931.980664583476027, -3952.308714988656448, 18836774.732423841953278, -829156.017496421467513, 21514931.962845288217068, -17932210.778365232050419, -8072494201.779275894165039, -6460113863.895132064819336, -222.173602005201502, 1659.205137688666582, 
                                      -2992.991589891935746, 25900.938132870542177, -829156.017496421467513, 8004769.846889731474221, -7372105.604233461432159, -12794820.884990680962801, -1878792436.773982048034668, -2169220317.451426506042480, 4177.261184352689270, 14607.888243231922388, 
                                      71902.143507687782403, -28674.105150793846406, 21514931.962845288217068, -7372105.604233461432159, 38413259.457580953836441, -8584315.697305401787162, -9505342907.893632888793945, -4779590004.937329292297363, -9430.188558204918081, -34674.042217854410410, 
                                      -60045.217362722614780, -48369.235531911857834, -17932210.778365232050419, -12794820.884990680962801, -8584315.697305401787162, 60779799.060389995574951, 16013003860.247953414916992, 14658302595.463346481323242, 68608.184806357661728, 154648.645059168338776, 
                                      -26811966.169163119047880, -6072512.055249223485589, -8072494201.779275894165039, -1878792436.773982048034668, -9505342907.893632888793945, 16013003860.247953414916992, 5862018298790.475585937500000, 4367243287003.839843750000000, 18739279.715231843292713, 45823756.309159711003304, 
                                      -19126451.173192154616117, -8284669.218432518653572, -6460113863.895132064819336, -2169220317.451426506042480, -4779590004.937329292297363, 14658302595.463346481323242, 4367243287003.839843750000000, 4103190381381.164062500000000, 17884690.297297786921263, 41283123.929086215794086, 
                                      -2.834121567592116, 14.760494021934209, -222.173602005201502, 4177.261184352689270, -9430.188558204918081, 68608.184806357661728, 18739279.715231843292713, 17884690.297297786921263, 68717.945202998365858, 125748.742078058421612, 
                                      -4.149999365210533, 52.976474165916443, 1659.205137688666582, 14607.888243231922388, -34674.042217854410410, 154648.645059168338776, 45823756.309159711003304, 41283123.929086215794086, 125748.742078058421612, 260100.000000000000000 };

#endif

   // Forward openrox callback to allow print of test_runner (needed for Android)
   rox_log_set_callback(RoxTest::_log_callback);

   Rox_Image Ir_uchar = NULL;
   error = rox_image_new_read_pgm ( &Ir_uchar, IMG_REF_PATH );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );
   
   Rox_Image Iw_uchar = NULL;
   error = rox_image_new_read_pgm ( &Iw_uchar, IMG_CUR_PATH );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Sint cols = 0, rows = 0;
   error = rox_image_get_size ( &rows, &cols, Ir_uchar );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Array2D_Float Ir = NULL;
   error = rox_array2d_float_new ( &Ir, rows, cols );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   error = rox_array2d_float_from_uchar_normalize ( Ir, Ir_uchar );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Array2D_Float Iw = NULL;
   error = rox_array2d_float_new ( &Iw, rows, cols );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   error = rox_array2d_float_from_uchar_normalize ( Iw, Iw_uchar );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );
   
   // Define gradient mask
   Rox_Array2D_Uint Gm = NULL;
   error = rox_imask_new ( &Gm, cols, rows );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   error = rox_imask_set_zero ( Gm );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Array2D_Uint Im = NULL;
   error = rox_imask_new ( &Im, cols, rows );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   error = rox_imask_set_ones ( Im );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Array2D_Float Ia = NULL;
   error = rox_array2d_float_new ( &Ia, cols, rows );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   error = rox_array2d_float_mean ( Ia, Ir, Iw );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Array2D_Float Id = NULL;
   error = rox_array2d_float_new ( &Id, cols, rows );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   error = rox_array2d_float_substract ( Id, Ir, Iw );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Array2D_Float Iu = NULL;
   error = rox_array2d_float_new ( &Iu, cols, rows );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   // Fill with zeros since borders may be ignored in gradient computation
   error = rox_array2d_float_fillzero ( Iu );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Array2D_Float Iv = NULL;
   error = rox_array2d_float_new ( &Iv, cols, rows );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );
   
   // Fill with zeros since borders may be ignored in gradient computation
   error = rox_array2d_float_fillzero ( Iv );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   error = rox_array2d_float_basegradient ( Iu, Iv, Gm, Ia, Im );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Matrix Lte_grt = NULL;
   error = rox_matrix_new ( &Lte_grt, 10, 1 );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   error = rox_array2d_double_set_buffer_no_stride ( Lte_grt, Lte_grt_data );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Matrix LtL_grt = NULL;
   error = rox_matrix_new ( &LtL_grt, 10, 10 );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   error = rox_array2d_double_set_buffer_no_stride ( LtL_grt, LtL_grt_data );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Matrix LtL = NULL;
   error = rox_matrix_new ( &LtL, 10, 10 );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   Rox_Matrix Lte = NULL;
   error = rox_matrix_new ( &Lte, 10, 1 );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   error = linsys_texture_matsl3_light_affine ( LtL, Lte, Ia, Id, Iu, Iv, Gm );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   rox_matrix_print(Lte);
   rox_matrix_print(LtL);
   
   rox_array2d_double_save (RESULT_PATH"/Lte_1.txt", Lte);
   rox_array2d_double_save (RESULT_PATH"/LtL_1.txt", LtL);

   error = rox_array2d_double_difference_l2_norm ( &l2_error, Lte_grt, Lte );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   ROX_TEST_MESSAGE("l2_error Lte = %f \n", l2_error);

   ROX_TEST_CHECK_CLOSE (l2_error, 0.0, 1e-12);
   
   error = rox_array2d_double_difference_l2_norm ( &l2_error, LtL_grt, LtL );
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );

   ROX_TEST_MESSAGE("l2_error LtL = %f \n", l2_error);

   ROX_TEST_CHECK_CLOSE (l2_error, 0.0, 1e-12);
}

ROX_TEST_SUITE_END()
