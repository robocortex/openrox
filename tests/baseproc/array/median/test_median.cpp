//==============================================================================
//
//    OPENROX   : File test_median.cpp
//
//    Contents  : Tests for median.c
//
//    Author(s) : R&D department directed by Ezio MALIS
//
//    Copyright : 2022 Robocortex S.A.S.
//
//    License   : LGPL v3 or commercial license
//
//==============================================================================

//=== INCLUDED HEADERS   =======================================================

#include <openrox_tests.hpp>

extern "C"
{
	#include <baseproc/array/median/median.h>
   #include <inout/numeric/array2d_print.h>
   #include <inout/system/print.h>
}

//=== INTERNAL MACROS    =======================================================

ROX_TEST_SUITE_BEGIN(median)

//=== INTERNAL TYPESDEFS =======================================================

//=== INTERNAL DATATYPES =======================================================

//=== INTERNAL VARIABLES =======================================================

double data_big_grt[260] = {
   25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 1.0756865942751119
   , 1.7434535556078572
   , 4.3005295193682969
   , 4.9040572070769031
   , 7.4611331708374564
   , 25.000000000000000
   , 25.000000000000000
   , 11.225264510015108
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 20.118940044010742
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 22.772079745768906
   , 19.842696475825051
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
   , 25.000000000000000
};

//=== INTERNAL FUNCTDEFS =====================================================

//=== INTERNAL FUNCTIONS =====================================================

//=== EXPORTED FUNCTIONS =====================================================


ROX_TEST_CASE_DECLARE(rox::OpenROXTest, test_array2d_double_median)
{
	Rox_ErrorCode error = ROX_ERROR_NONE;

	ROX_TEST_MESSAGE ( "This test has not been implemented yet !!! \n" );
	Rox_Array2D_Double input = NULL;
	Rox_Double median = 0.0;
	Rox_Double data_grt[7] = {1804289383.0, 846930886.0, 1681692777.0, 1714636915.0, 1957747793.0, 424238335.0, 719885386.0};
	Rox_Double median_grt[5] = {1325610134.5, 1681692777.0, 1698164846.0, 1681692777.0, 25.0};
	
	Rox_Sint size = 0;
	Rox_Double * data = NULL;


	// Size is even (in a column), case "two elements only" inside the algorithm 
	size = 2;
	error = rox_array2d_double_new(&input, size, 1);

	error = rox_array2d_double_get_data_pointer ( &data, input );
	
   for (Rox_Sint i = 0; i<size; i++)
	{
		data[i] = data_grt[i];
	}
	error = rox_array2d_double_median(&median, input);
	rox_log("median = %f\n", median);
	ROX_TEST_CHECK_CLOSE(median, median_grt[0], 1e-16);
	ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );
	rox_array2d_double_del(&input);
	
	// Size is even, case "two elements only" inside the algorithm 
	size = 2;
	error = rox_array2d_double_new(&input, 1, size);
	error = rox_array2d_double_get_data_pointer ( &data, input );

	for ( Rox_Sint i=0;i<size;i++)
	{
		data[i] = data_grt[i];	
	}
	error = rox_array2d_double_median(&median, input);
	rox_log("median = %f\n",median);
	ROX_TEST_CHECK_CLOSE(median, median_grt[0], 1e-16);
	ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );
	rox_array2d_double_del(&input);
	
	// Size is odd, case "one element only" inside the algorithm
	size = 3; 
	error = rox_array2d_double_new(&input, 1, size);
	error = rox_array2d_double_get_data_pointer(&data, input);
	for ( Rox_Sint i=0;i<size;i++)
	{
		data[i] = data_grt[i];	
	}
	error = rox_array2d_double_median(&median, input);
	rox_log("median = %f\n",median);
	ROX_TEST_CHECK_CLOSE(median, median_grt[1], 1e-16);
	ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );
	rox_array2d_double_del(&input);
	
	// Size is even, case "one element only" inside the algorithm
	size = 6; 
	error = rox_array2d_double_new(&input, 1, size);
	error = rox_array2d_double_get_data_pointer (&data, input);
	for ( Rox_Sint i=0;i<size;i++)
	{
		data[i] = data_grt[i];	
	}
	error = rox_array2d_double_median(&median, input);
	rox_log("median = %f\n",median);
	ROX_TEST_CHECK_CLOSE(median, median_grt[2], 1e-16);
	ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );
	
	rox_array2d_double_del(&input);
	
	// Size is odd, case "two elements only" inside the algorithm
	size = 7;
	error = rox_array2d_double_new(&input, 1, size);
	error = rox_array2d_double_get_data_pointer ( &data, input );

	for ( Rox_Sint i=0;i<size;i++)
	{
		data[i] = data_grt[i];	
	}
	error = rox_array2d_double_median(&median, input);
	rox_log("median = %f\n",median);
	ROX_TEST_CHECK_CLOSE(median, median_grt[3], 1e-16);
	ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE );	
	
   rox_array2d_double_del(&input);
   
   rox_log("MULTIPLE MAX VALUES VECTOR");
   rox_log("multiple max values array");
   size = 258;
   error = rox_array2d_double_new(&input, 1, size);
   error = rox_array2d_double_get_data_pointer (&data, input);
   for ( Rox_Sint i=0;i<size;i++)
   {
      data[i] = data_big_grt[i];  
   }
   rox_array2d_double_print(input);

   error = rox_array2d_double_median(&median, input);
   rox_log("median = %f\n",median);
   ROX_TEST_CHECK_CLOSE(median, median_grt[4], 1e-16);
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE ); 

   error = rox_array2d_double_asort(input);
   ROX_TEST_CHECK_EQUAL ( error, ROX_ERROR_NONE ); 

   rox_array2d_double_print(input);

	rox_array2d_double_del(&input);
}

ROX_TEST_SUITE_END()
